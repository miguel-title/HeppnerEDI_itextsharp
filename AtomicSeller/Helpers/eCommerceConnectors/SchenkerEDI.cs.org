using AtomicSeller.Models;
using AtomicSeller.ViewModels;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Security.Authentication;
using System.Text;
using System.Threading.Tasks;
using System.Web.Mvc;
using System.Web.Script.Serialization;
using ShopifyOrderAPI.Models;
using iTextSharp.text;
using iTextSharp.text.pdf;
using Microsoft.Win32;
using System.Text.RegularExpressions;

namespace AtomicSeller
{
    class SchenkerEDI
    {

        public void MakeIFCSUMFile(List<DeliveryDM> DonneeEDIFACTList)
        {
            int deliveryIndex = 0;
            foreach (var DonneeEDIFACTDATA in DonneeEDIFACTList)
            {
                deliveryIndex += 1;
                string strTxtFilePath = @"D:/Projects/AtomicSeller/Tech/\Apps/_Schenker/out/output" + deliveryIndex.ToString() + ".txt";
                
                using (StreamWriter writer = new StreamWriter(strTxtFilePath))
                {
                    writer.WriteLine(DonneeEDIFACTDATA.SenderCompanyName);
                    writer.WriteLine(DonneeEDIFACTDATA.SenderAddr1);
                    writer.WriteLine(DonneeEDIFACTDATA.SenderAddr2);
                    writer.WriteLine(DonneeEDIFACTDATA.SenderAddr3);
                    writer.WriteLine(DonneeEDIFACTDATA.SenderZip);
                    writer.WriteLine(DonneeEDIFACTDATA.SenderCity);
                    writer.WriteLine(DonneeEDIFACTDATA.SenderPhoneNumber);
                    writer.WriteLine(DonneeEDIFACTDATA.SenderEmail);
                    writer.WriteLine(DonneeEDIFACTDATA.SendercountryCode);

                    writer.WriteLine(DonneeEDIFACTDATA.RecipCompanyName);
                    writer.WriteLine(DonneeEDIFACTDATA.RecipAdr1);
                    writer.WriteLine(DonneeEDIFACTDATA.RecipAdr2);
                    writer.WriteLine(DonneeEDIFACTDATA.RecipZip);
                    writer.WriteLine(DonneeEDIFACTDATA.RecipCity);
                    writer.WriteLine(DonneeEDIFACTDATA.RecipCountryLib);
                    writer.WriteLine(DonneeEDIFACTDATA.RecipLastName);
                    writer.WriteLine(DonneeEDIFACTDATA.RecipPhoneNumber);
                    writer.WriteLine(DonneeEDIFACTDATA.RecipEmail);
                    writer.WriteLine(DonneeEDIFACTDATA.RecipCountryISOCode);

                    writer.WriteLine(DonneeEDIFACTDATA.ShippingDate);
                    writer.WriteLine(DonneeEDIFACTDATA.TrackingNumber);

                }
            }

        }

        public void MakeLabels(List<DeliveryDM> LabelDataList)
        {
            int deliveryIndex = 0;
            foreach(var LabelData in LabelDataList)
            {
                deliveryIndex += 1;
                string Barcode = "12345678901234567890123456789012";
                string Weight = LabelData.ParcelWeight;
                string PDFFilePath = @"D:/Projects/AtomicSeller/Tech/\Apps/_Schenker/out/output" + deliveryIndex.ToString() + ".pdf";
                int width = 105;
                int height = 110;
                // Make PDF label
                using (FileStream fs = new FileStream(PDFFilePath, FileMode.Create, FileAccess.Write, FileShare.None))
                {
                    #region Page
                    double PageWidth = iTextSharp.text.Utilities.MillimetersToPoints(width);
                    double PageHeight = iTextSharp.text.Utilities.MillimetersToPoints(height);

                    double PageLeftMargin = 0;
                    double PageRightMargin = 0;
                    double PageTopMargin = 0;
                    double PageBottomMargin = 0;
                    #endregion

                    Document document = new Document(new iTextSharp.text.Rectangle(
                        (float)PageWidth,
                        (float)PageHeight),
                        (float)PageLeftMargin,
                        (float)PageRightMargin,
                        (float)PageTopMargin,
                        (float)PageBottomMargin);

                    PdfWriter writer = PdfWriter.GetInstance(document, fs);

                    // Add meta information to the document
                    document.AddCreator("AtomicSeller");
                    document.Open();

                    // Makes it possible to add text to a specific place in the document using 
                    // a X & Y placement syntax.
                    PdfContentByte cb = writer.DirectContent;
                    cb.BeginText();

                    Font F111_300 = AtomicGetFont("Calibri", 7f, "Normal");
                    Font F211_300 = AtomicGetFont("Calibri", 9f, "Bold");
                    Font F311_300 = AtomicGetFont("Calibri", 11f, "Bold");
                    Font F411_300 = AtomicGetFont("Calibri", 12f, "Bold");
                    Font F511_300 = AtomicGetFont("Calibri", 19f, "Bold");
                    Font F222_300 = AtomicGetFont("Calibri", 16f, "Normal");
                    Font F312_300 = AtomicGetFont("Calibri", 16f, "Bold");
                    Font F322_300 = AtomicGetFont("Calibri", 22f, "Normal");
                    Font F323_300 = AtomicGetFont("Calibri", 22f, "Bold");
                    Font F334_300 = AtomicGetFont("Calibri", 36f, "Bold");
                    /********************************************************************************/
                    //1)Sender Part
                    float startX1 = (float)20;
                    float startY1 = (float)1300;
                    WriteRotateText_Dot(cb, startX1, startY1, "0", F111_300, "Exp : ");

                    float startX2 = (float)100;
                    float startY2 = (float)1310;
                    WriteRotateText_Dot(cb, startX2, startY2, "0", F411_300, "CLIENT");

                    float startX3 = (float)60;
                    float startY3 = (float)1250;
                    WriteRotateText_Dot(cb, startX3, startY3, "0", F111_300, LabelData.SendercountryCode + " " + LabelData.SenderZip + " " + LabelData.SenderAddr1);
                    
                    //7)Reference(customer)
                    float startX4 = (float)900;
                    float startY4 = (float)1300;
                    WriteRotateText_Dot(cb, startX4, startY4, "0", F312_300, "TEST1");

                    float startX5 = (float)20;
                    float startX6 = (float)1200;
                    float startY5 = (float)1200;
                    float startY6 = (float)1198;
                    DrawRectangleInPoints(startX5, startY5, startX6, startY6, cb);
                    
                    //2)Recipient
                    float startX7 = (float)20;
                    float startY7 = (float)1180;
                    WriteRotateText_Dot(cb, startX7, startY7, "0", F111_300, "Des : ");

                    float startX8 = (float)100;
                    float startY8 = (float)1190;
                    WriteRotateText_Dot(cb, startX8, startY8, "0", F411_300, "TEST 1");

                    float startX9 = (float)60;
                    float startY9 = (float)1130;
                    WriteRotateText_Dot(cb, startX9, startY9, "0", F111_300, "RUE 1.1");

                    float startX10 = (float)20;
                    float startY10 = (float)1080;
                    WriteRotateText_Dot(cb, startX10, startY10, "0", F111_300, LabelData.RecipCountryISOCode + " " + LabelData.RecipZip + " " + LabelData.RecipAdr1);

                    float startX11 = (float)20;
                    float startX12 = (float)950;
                    float startY11 = (float)1030;
                    float startY12 = (float)1028;
                    DrawRectangleInPoints(startX11, startY11, startX12, startY12, cb);

                    //3)Instruction Delivery
                    float startX13 = (float)20;
                    float startY13 = (float)1020;
                    WriteRotateText_Dot(cb, startX13, startY13, "0", F111_300, "Ins : ");

                    float startX14 = (float)20;
                    float startX15 = (float)820;
                    float startY14 = (float)860;
                    float startY15 = (float)858;
                    DrawRectangleInPoints(startX14, startY14, startX15, startY15, cb);

                    //4)Features of the expedition
                    float startX16 = (float)20;
                    float startY16 = (float)850;
                    WriteRotateText_Dot(cb, startX16, startY16, "0", F111_300, "Recepisse");

                    float startX17 = (float)400;
                    float startY17 = (float)850;
                    WriteRotateText_Dot(cb, startX17, startY17, "0", F111_300, ":");
                    
                    float startX18 = (float)420;
                    float startY18 = (float)870;
                    WriteRotateText_Dot(cb, startX18, startY18, "0", F312_300, "42006156");
                    
                    float startX19 = (float)20;
                    float startY19 = (float)810;
                    WriteRotateText_Dot(cb, startX19, startY19, "0", F111_300, "Colis");

                    float startX20 = (float)200;
                    float startY20 = (float)830;
                    WriteRotateText_Dot(cb, startX20, startY20, "0", F312_300, "2/4");

                    float startX21 = (float)400;
                    float startY21 = (float)810;
                    WriteRotateText_Dot(cb, startX21, startY21, "0", F111_300, ":");

                    float startX22 = (float)420;
                    float startY22 = (float)810;
                    WriteRotateText_Dot(cb, startX22, startY22, "0", F111_300, "42006156002");
                    
                    float startX23 = (float)20;
                    float startY23 = (float)770;
                    WriteRotateText_Dot(cb, startX23, startY23, "0", F111_300, "Support de cond.");

                    float startX24 = (float)400;
                    float startY24 = (float)770;
                    WriteRotateText_Dot(cb, startX17, startY17, "0", F111_300, ":");
                    
                    float startX25 = (float)20;
                    float startY25 = (float)730;
                    WriteRotateText_Dot(cb, startX25, startY25, "0", F111_300, "Date exped");

                    float startX26 = (float)400;
                    float startY26 = (float)730;
                    WriteRotateText_Dot(cb, startX26, startY26, "0", F111_300, ":");

                    float startX27 = (float)420;
                    float startY27 = (float)730;
                    WriteRotateText_Dot(cb, startX27, startY27, "0", F111_300, "06/05/16");

                    float startX28 = (float)20;
                    float startY28 = (float)690;
                    WriteRotateText_Dot(cb, startX28, startY28, "0", F111_300, "Date imp. inv");

                    float startX29 = (float)400;
                    float startY29 = (float)690;
                    WriteRotateText_Dot(cb, startX29, startY29, "0", F111_300, ":");

                    float startX30 = (float)420;
                    float startY30 = (float)690;
                    WriteRotateText_Dot(cb, startX30, startY30, "0", F111_300, "11/05/2016");

                    float startX31 = (float)20;
                    float startY31 = (float)650;
                    WriteRotateText_Dot(cb, startX31, startY31, "0", F111_300, "Poids envoi");

                    float startX32 = (float)400;
                    float startY32 = (float)650;
                    WriteRotateText_Dot(cb, startX32, startY32, "0", F111_300, ":");

                    float startX33 = (float)420;
                    float startY33 = (float)650;
                    WriteRotateText_Dot(cb, startX33, startY33, "0", F111_300, "4.00 kg");


                    float startX34 = (float)20;
                    float startX35 = (float)1200;
                    float startY34 = (float)600;
                    float startY35 = (float)598;
                    DrawRectangleInPoints(startX34, startY34, startX35, startY35, cb);
                    
                    float startX36 = (float)820;
                    float startX37 = (float)822;
                    float startY36 = (float)1030;
                    float startY37 = (float)600;
                    DrawRectangleInPoints(startX36, startY36, startX37, startY37, cb);


                    float startX38 = (float)950;
                    float startX39 = (float)1200;
                    float startY38 = (float)728;
                    float startY39 = (float)730;
                    DrawRectangleInPoints(startX38, startY38, startX39, startY39, cb);


                    float startX40 = (float)950;
                    float startX41 = (float)952;
                    float startY40 = (float)1200;
                    float startY41 = (float)600;
                    DrawRectangleInPoints(startX40, startY40, startX41, startY41, cb);
                    
                    //8)Platforms transit
                    float startX42 = (float)970;
                    float startY42 = (float)1000;
                    WriteRotateText_Dot(cb, startX42, startY42, "0", F334_300, "LOT");

                    float startX43 = (float)20;
                    float startX44 = (float)1200;
                    float startY43 = (float)198;
                    float startY44 = (float)200;
                    DrawRectangleInPoints(startX43, startY43, startX44, startY44, cb);

                    float startX45 = (float)1000;
                    float startX46 = (float)1002;
                    float startY45 = (float)198;
                    float startY46 = (float)20;
                    DrawRectangleInPoints(startX45, startY45, startX46, startY46, cb);
                    
                    //11)Fashion routing
                    float startX47 = (float)1020;
                    float startY47 = (float)180;
                    WriteRotateText_Dot(cb, startX47, startY47, "0", F323_300, "LOT");
                    
                    //6)Agency sender
                    float startX48 = (float)20;
                    float startY48 = (float)200;
                    WriteRotateText_Dot(cb, startX48, startY48, "0", F312_300, "SCHENKER FRANCE");

                    float startX49 = (float)20;
                    float startY49 = (float)125;
                    WriteRotateText_Dot(cb, startX49, startY49, "0", F111_300, "ST ETIENNE");

                    float startX50 = (float)20;
                    float startY50 = (float)90;
                    WriteRotateText_Dot(cb, startX50, startY50, "0", F111_300, "TEL:04-77-53-92-60");

                    //5)Barcode
                    float startX51 = (float)50;
                    float startX52 = (float)1150;
                    float startY51 = (float)500;
                    float startY52 = (float)300;
                    InsertBarCode128_mm(Barcode, cb, startX51, startY51, startX52, startY52);

                    float startX53 = (float)370;
                    float startY53 = (float)290;
                    WriteRotateText_Dot(cb, startX53, startY53, "0", F111_300, Barcode);
                    
                    //OutLines
                    float startX54 = (float)0;
                    float startX55 = (float)4;
                    float startY54 = (float)0;
                    float startY55 = (float)1300;
                    DrawRectangleInPoints(startX54, startY54, startX55, startY55, cb, 1);

                    float startX56 = (float)0;
                    float startX57 = (float)1250;
                    float startY56 = (float)1296;
                    float startY57 = (float)1300;
                    DrawRectangleInPoints(startX56, startY56, startX57, startY57, cb, 1);

                    float startX58 = (float)1236;
                    float startX59 = (float)1240;
                    float startY58 = (float)0;
                    float startY59 = (float)1300;
                    DrawRectangleInPoints(startX58, startY58, startX59, startY59, cb, 1);

                    float startX60 = (float)0;
                    float startX61 = (float)1250;
                    float startY60 = (float)0;
                    float startY61 = (float)4;
                    DrawRectangleInPoints(startX60, startY60, startX61, startY61, cb, 1);
                    /********************************************************************************/

                    cb.EndText();

                    document.Close();
                    writer.Close();
                    fs.Close();

                }
            }
        }


        public void DrawRectangleInPoints(float llx_p, float lly_p, float urx_p, float ury_p, PdfContentByte cb, int BGColorID = 0)
        {
            //change dots to points
            llx_p = iTextSharp.text.Utilities.MillimetersToPoints(iTextSharp.text.Utilities.InchesToMillimeters(llx_p / 300));
            lly_p = iTextSharp.text.Utilities.MillimetersToPoints(iTextSharp.text.Utilities.InchesToMillimeters(lly_p / 300));
            urx_p = iTextSharp.text.Utilities.MillimetersToPoints(iTextSharp.text.Utilities.InchesToMillimeters(urx_p / 300));
            ury_p = iTextSharp.text.Utilities.MillimetersToPoints(iTextSharp.text.Utilities.InchesToMillimeters(ury_p / 300));

            cb.EndText();
            var rect = new iTextSharp.text.Rectangle(llx_p, lly_p, urx_p, ury_p);
            //rect.Border = iTextSharp.text.Rectangle.LEFT_BORDER | iTextSharp.text.Rectangle.RIGHT_BORDER;
            rect.Border = iTextSharp.text.Rectangle.BOX;
            rect.BorderWidth = 1;
            if (BGColorID == 0)
            {
                rect.BackgroundColor = new BaseColor(0, 0, 0);
                rect.BorderColor = new BaseColor(0, 0, 0);
            }
            else
            {
                rect.BackgroundColor = new BaseColor(255, 0, 0);
                rect.BorderColor = new BaseColor(255, 0, 0);
            }
            cb.Rectangle(rect);

            cb.Stroke();
            cb.BeginText();

        }
        public void InsertBarCode128_mm(string Code, PdfContentByte cb, float Leftx, float Lowery, float Rightx, float Uppery)
        {
            //float LeftX_p = iTextSharp.text.Utilities.MillimetersToPoints(Leftx_mm);
            //float LowY_p = iTextSharp.text.Utilities.MillimetersToPoints(Lowery_mm);
            //float RightX_p = iTextSharp.text.Utilities.MillimetersToPoints(Rightx_mm);
            //float UpY_p = iTextSharp.text.Utilities.MillimetersToPoints(Uppery_mm);
            //change dots to points
            float LeftX_p = iTextSharp.text.Utilities.MillimetersToPoints(iTextSharp.text.Utilities.InchesToMillimeters(Leftx / 300));// 200;
            float LowY_p = iTextSharp.text.Utilities.MillimetersToPoints(iTextSharp.text.Utilities.InchesToMillimeters(Lowery / 300));
            float RightX_p = iTextSharp.text.Utilities.MillimetersToPoints(iTextSharp.text.Utilities.InchesToMillimeters((Rightx) / 300));
            float UpY_p = iTextSharp.text.Utilities.MillimetersToPoints(iTextSharp.text.Utilities.InchesToMillimeters(Uppery / 300));

            Rectangle BarCodeRect = new Rectangle(LeftX_p, LowY_p, RightX_p, UpY_p);

            Barcode128 ItextSharpBarCode = new Barcode128
            {
                Code = Code,
                TextAlignment = Element.ALIGN_CENTER,
                StartStopText = false,//true,
                CodeType = Barcode.CODE128,
                Extended = false,
                Font = null
            };
            Image _img = ItextSharpBarCode.CreateImageWithBarcode(cb, BaseColor.BLACK, BaseColor.BLACK);
            _img.ScaleAbsolute(BarCodeRect);
            _img.SetAbsolutePosition(LeftX_p, LowY_p);
            cb.AddImage(_img);
        }

        public void WriteRotateText_Dot(PdfContentByte cb, float StartX, float StartY, string Rotation, Font _Font, string Text)
        {
            //chage dots to points
            StartX = iTextSharp.text.Utilities.MillimetersToPoints(iTextSharp.text.Utilities.InchesToMillimeters(StartX / 300));
            StartY = iTextSharp.text.Utilities.MillimetersToPoints(iTextSharp.text.Utilities.InchesToMillimeters(StartY / 300));


            cb.EndText();

            PdfPCell cell = new PdfPCell();
            PdfPTable table = new PdfPTable(1);
            table.TotalWidth = 400;
            //Paragraph paragraph = new Paragraph(Text);
            Phrase Phrase1 = new Phrase(new Chunk(Text, _Font));
            //paragraph.Font = _Font;

            //StartX -= 500;
            //StartY /= 2;

            cell = new PdfPCell(Phrase1);
            if (Rotation == "1")
            {
                cell.Rotation = 270;
                StartX = StartX - 395;
            }
            if (Rotation == "2")
            {
                cell.Rotation = 180;
                StartX = StartX - 395;
            }
            if (Rotation == "3")
            {
                cell.Rotation = 90;
                StartX = StartX - 395;
            }

            cell.BorderWidth = 0;

            table.AddCell(cell);
            table.WriteSelectedRows(0, -1, StartX, StartY, cb);
            cb.BeginText();

        }

        public iTextSharp.text.Font AtomicGetFont(string fontName, float FontSize, string FontStyle)
        {

            //// FontSize
            if (FontSize < 1) FontSize = 2;

            //// FontStyle
            bool Bold = false, Italic = false;

            int FontStyleToken = iTextSharp.text.Font.NORMAL;
            if (FontStyle.ToUpper().Contains("BOLD")) { FontStyleToken = iTextSharp.text.Font.BOLD; Bold = true; }
            if (FontStyle.ToUpper().Contains("ITALIC")) { FontStyleToken = FontStyleToken | iTextSharp.text.Font.ITALIC; Italic = true; }
            if (FontStyle.ToUpper().Contains("UNDERLINE")) FontStyleToken = FontStyleToken | iTextSharp.text.Font.UNDERLINE;

            //// FontName
            string filename;
            if (string.IsNullOrEmpty(fontName))
                filename = "calibri.ttf";
            else
            {
                //System.Drawing.Font TestFont = new System.Drawing.Font( );
                filename = GetSystemFontFileName(fontName, Bold, Italic);
                //filename = fontName + ".ttf";
                //Local.AtomicMainForm.Text += filename;
            }

            if (!FontFactory.IsRegistered(fontName))
            {
                var fontsFolderPath = Environment.GetFolderPath(Environment.SpecialFolder.Fonts);

                var fontPath = Environment.GetEnvironmentVariable("SystemRoot") + "\\fonts\\" + filename;
                FontFactory.Register(fontPath);
            }


            return FontFactory.GetFont(fontName, BaseFont.IDENTITY_H, BaseFont.EMBEDDED, FontSize, FontStyleToken);
        }

        public string GetSystemFontFileName(string fontname, bool Bold, bool Italic) //System.Drawing.Font font)
        {
            RegistryKey fonts = null;

            try
            {
                fonts = Registry.LocalMachine.OpenSubKey(@"Software\Microsoft\Windows NT\CurrentVersion\Fonts", false);
                if (fonts == null)
                {
                    fonts = Registry.LocalMachine.OpenSubKey(@"Software\Microsoft\Windows\CurrentVersion\Fonts", false);
                    if (fonts == null)
                    {
                        throw new Exception("Can't find font registry database.");
                    }
                }

                string suffix = "";
                if (Bold)
                    suffix += "(?: Bold)?";
                if (Italic)
                    suffix += "(?: Italic)?";

                var regex = new Regex(@"^(?:.+ & )?" + Regex.Escape(fontname) + @"(?: & .+)?(?<suffix>" + suffix + @") \(TrueType\)$", RegexOptions.Compiled);

                string[] names = fonts.GetValueNames();

                string name = names.Select(n => regex.Match(n)).Where(m => m.Success).OrderByDescending(m => m.Groups["suffix"].Length).Select(m => m.Value).FirstOrDefault();

                if (name != null)
                {
                    return fonts.GetValue(name).ToString();
                }
                else
                {
                    return null;
                }
            }
            finally
            {
                if (fonts != null)
                {
                    fonts.Dispose();
                }
            }
        }


    }
}